[versions]

room = "2.7.1"
ksp = "2.0.0-1.0.24"        # kotlin version of this project - kotlin compatible ksp version
swiperefreshlayout = "1.2.0-beta01"
agp = "8.8.0"
datastorePreferences = "1.1.2"
datastoreCoreAndroid = "1.1.2"
koin-bom = "4.0.2"
kotlin = "2.0.0"
kotlinSerialization = "1.9.0"
coreKtx = "1.15.0"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
kotlinxCoroutinesAndroid = "1.9.0"
kotlinxCoroutinesCore = "1.7.3"
kotlinxDatetime = "0.5.0"
lifecycleRuntimeKtx = "2.8.7"
activityCompose = "1.10.0"
composeBom = "2024.04.01"
okhttp = "4.12.0"
appcompat = "1.6.1"
material = "1.10.0"
kotlinJvm = "1.8.10"
annotationJvm = "1.9.1"
coreSplashscreen = "1.0.1"
workRuntimeKtx = "2.10.0"


[libraries]
# splash
androidx-core-splashscreen = { module = "androidx.core:core-splashscreen", version.ref = "coreSplashscreen" }
androidx-lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycleRuntimeKtx" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-lifecycle-runtime-compose = { group = "androidx.lifecycle", name = "lifecycle-runtime-compose", version.ref = "lifecycleRuntimeKtx" }

# NAVIGATION
# Type-safe navigation component specifically designed for Jetpack Compose
# Handles screen transitions, deep links, and navigation state management
androidx-navigation-compose = { module = "androidx.navigation:navigation-compose", version.ref = "lifecycleRuntimeKtx" }
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
androidx-datastore-preferences = { module = "androidx.datastore:datastore-preferences", version.ref = "datastorePreferences" }
androidx-datastore-core-android = { group = "androidx.datastore", name = "datastore-core-android", version.ref = "datastoreCoreAndroid" }
androidx-work-runtime-ktx = { module = "androidx.work:work-runtime-ktx", version.ref = "workRuntimeKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-material-icons-extended = {  group = "androidx.compose.material", name = "material-icons-extended"}
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
koin-bom = { module = "io.insert-koin:koin-bom", version.ref = "koin-bom" }
koin-core = { module = "io.insert-koin:koin-core" }
koin-android = { module = "io.insert-koin:koin-android" }
koin-androidx-compose = { module = "io.insert-koin:koin-androidx-compose" }
koin-androidx-compose-navigation = { module = "io.insert-koin:koin-androidx-compose-navigation" }
koin-androidx-workmanager = { module = "io.insert-koin:koin-androidx-workmanager" }
koin-core-coroutines = { module = "io.insert-koin:koin-core-coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinxCoroutinesAndroid" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinxCoroutinesCore" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }
androidx-swiperefreshlayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version.ref = "swiperefreshlayout" }
androidx-room-ktx = { module = "androidx.room:room-ktx", version.ref = "room" }
androidx-room-compiler = { module = "androidx.room:room-compiler", version.ref = "room" }
androidx-room-runtime = { module = "androidx.room:room-runtime", version.ref = "room" }
androidx-annotation-jvm = { group = "androidx.annotation", name = "annotation-jvm", version.ref = "annotationJvm" }


[plugins]
# Android application plugin for building APK/AAB files
# Applied to the `:app` module to enable it to be built as a deployable Android application.
android-application = { id = "com.android.application", version.ref = "agp" }

# Kotlin Android plugin for compiling Kotlin code in Android projects
# Essential for any Android module that contains Kotlin source code.
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }

# Kotlin Compose compiler plugin for optimizing Compose code generation
# CRITICAL: This plugin transforms `@Composable` functions into actual UI elements that Android can render.
# Must match your Kotlin compiler version.
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

# Android library plugin for creating reusable Android library modules
# Applied to all your `core` and `feature` modules that are libraries, not standalone apps.
android-library = { id = "com.android.library", version.ref = "agp" }

# Kotlin JVM plugin for pure Kotlin/Java modules without Android dependencies.
# Used for modules that contain only Kotlin code and do not require Android APIs (e.g., `:domain` modules).
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlinJvm" }

# Kotlin serialization plugin for JSON/XML serialization support
# Enables the use of `kotlinx.serialization` annotations and generates necessary serialization code.
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlinSerialization" }

ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }